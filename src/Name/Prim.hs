{- WARNING! Do not edit!!!
   This code is autogenerated from src/data/*.txt! -}

{-# Language NoOverloadedStrings #-}
module Name.Prim where

import Name.Name


{-# NOINLINE tc_IOErrorType #-}
tc_IOErrorType = toName TypeConstructor ("Jhc.Type.Handle","IOErrorType")
{-# NOINLINE tc_IOMode #-}
tc_IOMode = toName TypeConstructor ("Jhc.Type.Handle","IOMode")
{-# NOINLINE tc_Bang_ #-}
tc_Bang_ = toName TypeConstructor ("Jhc.Prim.Rts","Bang_")
{-# NOINLINE tc_Arrow #-}
tc_Arrow = toName TypeConstructor ("Jhc.Prim.Prim","->")
{-# NOINLINE tc_MutArray__ #-}
tc_MutArray__ = toName TypeConstructor ("Jhc.Prim.Array","MutArray_")
{-# NOINLINE tc_List #-}
tc_List = toName TypeConstructor ("Jhc.Prim.Prim","[]")
{-# NOINLINE tc_Char #-}
tc_Char = toName TypeConstructor ("Jhc.Type.Basic","Char")
{-# NOINLINE tc_IO #-}
tc_IO = toName TypeConstructor ("Jhc.Prim.IO","IO")
{-# NOINLINE tc_ST #-}
tc_ST = toName TypeConstructor ("Jhc.Prim.IO","ST")
{-# NOINLINE tc_ACIO #-}
tc_ACIO = toName TypeConstructor ("Jhc.Prim.IO","ACIO")
{-# NOINLINE tc_State_ #-}
tc_State_ = toName TypeConstructor ("Jhc.Prim.IO","State_")
{-# NOINLINE tc_RealWorld #-}
tc_RealWorld = toName TypeConstructor ("Jhc.Prim.IO","RealWorld")
{-# NOINLINE tc_Bool #-}
tc_Bool = toName TypeConstructor ("Jhc.Prim.Prim","Bool")
{-# NOINLINE tc_Ordering #-}
tc_Ordering = toName TypeConstructor ("Jhc.Prim.Prim","Ordering")
{-# NOINLINE tc_Bool_ #-}
tc_Bool_ = toName TypeConstructor ("Jhc.Prim.Bits","Bool_")
{-# NOINLINE tc_Unit #-}
tc_Unit = toName TypeConstructor ("Jhc.Prim.Prim","()")
{-# NOINLINE tc_Ratio #-}
tc_Ratio = toName TypeConstructor ("Jhc.Type.Float","Ratio")
{-# NOINLINE tc_Float #-}
tc_Float = toName TypeConstructor ("Jhc.Type.Float","Float")
{-# NOINLINE tc_Double #-}
tc_Double = toName TypeConstructor ("Jhc.Type.Float","Double")
{-# NOINLINE tc_Ptr #-}
tc_Ptr = toName TypeConstructor ("Jhc.Type.Ptr","Ptr")
{-# NOINLINE tc_FunPtr #-}
tc_FunPtr = toName TypeConstructor ("Jhc.Type.Ptr","FunPtr")
{-# NOINLINE tc_Integer #-}
tc_Integer = toName TypeConstructor ("Jhc.Type.Basic","Integer")
{-# NOINLINE tc_Int #-}
tc_Int = toName TypeConstructor ("Jhc.Type.Word","Int")
{-# NOINLINE tc_Bits1 #-}
tc_Bits1 = toName TypeConstructor ("Jhc.Prim.Bits","Bits1_")
{-# NOINLINE tc_Bits8 #-}
tc_Bits8 = toName TypeConstructor ("Jhc.Prim.Bits","Bits8_")
{-# NOINLINE tc_Bits16 #-}
tc_Bits16 = toName TypeConstructor ("Jhc.Prim.Bits","Bits16_")
{-# NOINLINE tc_Bits32 #-}
tc_Bits32 = toName TypeConstructor ("Jhc.Prim.Bits","Bits32_")
{-# NOINLINE tc_Bits64 #-}
tc_Bits64 = toName TypeConstructor ("Jhc.Prim.Bits","Bits64_")
{-# NOINLINE tc_Bits128 #-}
tc_Bits128 = toName TypeConstructor ("Jhc.Prim.Bits","Bits128_")
{-# NOINLINE tc_BitsPtr #-}
tc_BitsPtr = toName TypeConstructor ("Jhc.Prim.Bits","BitsPtr_")
{-# NOINLINE tc_BitsMax #-}
tc_BitsMax = toName TypeConstructor ("Jhc.Prim.Bits","BitsMax_")
{-# NOINLINE tc_Float32 #-}
tc_Float32 = toName TypeConstructor ("Jhc.Prim.Bits","Float32_")
{-# NOINLINE tc_Float64 #-}
tc_Float64 = toName TypeConstructor ("Jhc.Prim.Bits","Float64_")
{-# NOINLINE tc_Float80 #-}
tc_Float80 = toName TypeConstructor ("Jhc.Prim.Bits","Float80_")
{-# NOINLINE tc_Float128 #-}
tc_Float128 = toName TypeConstructor ("Jhc.Prim.Bits","Float128_")
{-# NOINLINE tc_Complex #-}
tc_Complex = toName TypeConstructor ("Jhc.Prim.Bits","Complex_")
{-# NOINLINE tc_Addr_ #-}
tc_Addr_ = toName TypeConstructor ("Jhc.Prim.Bits","Addr_")
{-# NOINLINE tc_FunAddr_ #-}
tc_FunAddr_ = toName TypeConstructor ("Jhc.Prim.Bits","FunAddr_")
{-# NOINLINE tc_Char_ #-}
tc_Char_ = toName TypeConstructor ("Jhc.Prim.Bits","Char_")
{-# NOINLINE dc_Boolzh #-}
dc_Boolzh = toName DataConstructor ("Jhc.Prim.Prim","Bool#")
{-# NOINLINE dc_Char #-}
dc_Char = toName DataConstructor ("Jhc.Type.Basic","Char")
{-# NOINLINE dc_Cons #-}
dc_Cons = toName DataConstructor ("Jhc.Prim.Prim",":")
{-# NOINLINE dc_EmptyList #-}
dc_EmptyList = toName DataConstructor ("Jhc.Prim.Prim","[]")
{-# NOINLINE dc_Int #-}
dc_Int = toName DataConstructor ("Jhc.Type.Word","Int")
{-# NOINLINE dc_Integer #-}
dc_Integer = toName DataConstructor ("Jhc.Type.Basic","Integer")
{-# NOINLINE dc_Ratio #-}
dc_Ratio = toName DataConstructor ("Jhc.Type.Float",":%")
{-# NOINLINE dc_Unit #-}
dc_Unit = toName DataConstructor ("Jhc.Prim.Prim","()")
{-# NOINLINE dc_Pair #-}
dc_Pair = toName DataConstructor ("Jhc.Prim.Prim","(,)")
{-# NOINLINE dc_Word #-}
dc_Word = toName DataConstructor ("Jhc.Type.Word","Word")
{-# NOINLINE dc_True #-}
dc_True = toName DataConstructor ("Jhc.Prim.Prim","True")
{-# NOINLINE dc_False #-}
dc_False = toName DataConstructor ("Jhc.Prim.Prim","True")
{-# NOINLINE dc_EQ #-}
dc_EQ = toName DataConstructor ("Jhc.Prim.Prim","EQ")
{-# NOINLINE class_Eq #-}
class_Eq = toName ClassName ("Jhc.Class.Ord","Eq")
{-# NOINLINE class_Ord #-}
class_Ord = toName ClassName ("Jhc.Class.Ord","Ord")
{-# NOINLINE class_Enum #-}
class_Enum = toName ClassName ("Jhc.Enum","Enum")
{-# NOINLINE class_Bounded #-}
class_Bounded = toName ClassName ("Jhc.Enum","Bounded")
{-# NOINLINE class_Show #-}
class_Show = toName ClassName ("Jhc.Show","Show")
{-# NOINLINE class_Read #-}
class_Read = toName ClassName ("Jhc.Text.Read","Read")
{-# NOINLINE class_Ix #-}
class_Ix = toName ClassName ("Data.Ix","Ix")
{-# NOINLINE class_Functor #-}
class_Functor = toName ClassName ("Jhc.Monad","Functor")
{-# NOINLINE class_Monad #-}
class_Monad = toName ClassName ("Jhc.Monad","Monad")
{-# NOINLINE class_Num #-}
class_Num = toName ClassName ("Jhc.Class.Num","Num")
{-# NOINLINE class_Real #-}
class_Real = toName ClassName ("Jhc.Class.Real","Real")
{-# NOINLINE class_Integral #-}
class_Integral = toName ClassName ("Jhc.Class.Real","Integral")
{-# NOINLINE class_Fractional #-}
class_Fractional = toName ClassName ("Jhc.Class.Real","Fractional")
{-# NOINLINE class_Floating #-}
class_Floating = toName ClassName ("Jhc.Float","Floating")
{-# NOINLINE class_RealFrac #-}
class_RealFrac = toName ClassName ("Jhc.Float","RealFrac")
{-# NOINLINE class_RealFloat #-}
class_RealFloat = toName ClassName ("Jhc.Float","RealFloat")
{-# NOINLINE rt_bits8 #-}
rt_bits8 = toName RawType "bits8"
{-# NOINLINE rt_bits16 #-}
rt_bits16 = toName RawType "bits16"
{-# NOINLINE rt_bits32 #-}
rt_bits32 = toName RawType "bits32"
{-# NOINLINE rt_bits64 #-}
rt_bits64 = toName RawType "bits64"
{-# NOINLINE rt_bits128 #-}
rt_bits128 = toName RawType "bits128"
{-# NOINLINE rt_bool #-}
rt_bool = toName RawType "bool"
{-# NOINLINE rt_float32 #-}
rt_float32 = toName RawType "fbits32"
{-# NOINLINE rt_float64 #-}
rt_float64 = toName RawType "fbits64"
{-# NOINLINE rt_float80 #-}
rt_float80 = toName RawType "fbits80"
{-# NOINLINE rt_float128 #-}
rt_float128 = toName RawType "fbits128"
{-# NOINLINE rt_bits_max_ #-}
rt_bits_max_ = toName RawType "bits<max>"
{-# NOINLINE rt_bits_ptr_ #-}
rt_bits_ptr_ = toName RawType "bits<ptr>"
{-# NOINLINE v_eqString #-}
v_eqString = toName Val ("Jhc.String","eqString")
{-# NOINLINE v_eqUnpackedString #-}
v_eqUnpackedString = toName Val ("Jhc.String","eqUnpackedString")
{-# NOINLINE v_error #-}
v_error = toName Val ("Jhc.IO","error")
{-# NOINLINE v_map #-}
v_map = toName Val ("Jhc.Basics","map")
{-# NOINLINE v_and #-}
v_and = toName Val ("Jhc.Order","&&")
{-# NOINLINE v_foldr #-}
v_foldr = toName Val ("Jhc.Basics","foldr")
{-# NOINLINE v_foldl #-}
v_foldl = toName Val ("Jhc.Basics","foldl")
{-# NOINLINE v_drop #-}
v_drop = toName Val ("Jhc.List","drop")
{-# NOINLINE v_cat #-}
v_cat = toName Val ("Jhc.Basics","++")
{-# NOINLINE v_compose #-}
v_compose = toName Val ("Jhc.Basics",".")
{-# NOINLINE v_bind #-}
v_bind = toName Val ("Jhc.Monad",">>=")
{-# NOINLINE v_bind_ #-}
v_bind_ = toName Val ("Jhc.Monad",">>")
{-# NOINLINE v_fail #-}
v_fail = toName Val ("Jhc.Monad","fail")
{-# NOINLINE v_concatMap #-}
v_concatMap = toName Val ("Jhc.Basics","concatMap")
{-# NOINLINE v_fromInteger #-}
v_fromInteger = toName Val ("Jhc.Class.Num","fromInteger")
{-# NOINLINE v_fromInt #-}
v_fromInt = toName Val ("Jhc.Class.Num","fromInt")
{-# NOINLINE v_sub #-}
v_sub = toName Val ("Jhc.Class.Num","-")
{-# NOINLINE v_fromRational #-}
v_fromRational = toName Val ("Jhc.Class.Real","fromRational")
{-# NOINLINE v_negate #-}
v_negate = toName Val ("Jhc.Class.Num","negate")
{-# NOINLINE v_compare #-}
v_compare = toName Val ("Jhc.Class.Ord","compare")
{-# NOINLINE v_leq #-}
v_leq = toName Val ("Jhc.Class.Ord","<=")
{-# NOINLINE v_geq #-}
v_geq = toName Val ("Jhc.Class.Ord",">=")
{-# NOINLINE v_lt #-}
v_lt = toName Val ("Jhc.Class.Ord","<")
{-# NOINLINE v_gt #-}
v_gt = toName Val ("Jhc.Class.Ord",">")
{-# NOINLINE v_equals #-}
v_equals = toName Val ("Jhc.Class.Ord","==")
{-# NOINLINE v_fromEnum #-}
v_fromEnum = toName Val ("Jhc.Enum","fromEnum")
{-# NOINLINE v_toEnum #-}
v_toEnum = toName Val ("Jhc.Enum","toEnum")
{-# NOINLINE v_enumFrom #-}
v_enumFrom = toName Val ("Jhc.Enum","enumFrom")
{-# NOINLINE v_enumFromTo #-}
v_enumFromTo = toName Val ("Jhc.Enum","enumFromTo")
{-# NOINLINE v_enumFromThenTo #-}
v_enumFromThenTo = toName Val ("Jhc.Enum","enumFromThenTo")
{-# NOINLINE v_enumFromThen #-}
v_enumFromThen = toName Val ("Jhc.Enum","enumFromThen")
{-# NOINLINE v_succ #-}
v_succ = toName Val ("Jhc.Enum","succ")
{-# NOINLINE v_pred #-}
v_pred = toName Val ("Jhc.Enum","pred")
{-# NOINLINE v_minBound #-}
v_minBound = toName Val ("Jhc.Enum","minBound")
{-# NOINLINE v_maxBound #-}
v_maxBound = toName Val ("Jhc.Enum","maxBound")
{-# NOINLINE v_showsPrec #-}
v_showsPrec = toName Val ("Jhc.Show","showsPrec")
{-# NOINLINE v_showParen #-}
v_showParen = toName Val ("Jhc.Show","showParen")
{-# NOINLINE v_showChar #-}
v_showChar = toName Val ("Jhc.Show","showChar")
{-# NOINLINE v_showString #-}
v_showString = toName Val ("Jhc.Show","showString")
{-# NOINLINE v_readsPrec #-}
v_readsPrec = toName Val ("Jhc.Text.Read","readsPrec")
{-# NOINLINE v_readParen #-}
v_readParen = toName Val ("Jhc.Text.Read","readParen")
{-# NOINLINE v_lex #-}
v_lex = toName Val ("Jhc.Text.Read","lex")
{-# NOINLINE v_range #-}
v_range = toName Val ("Data.Ix","range")
{-# NOINLINE v_index #-}
v_index = toName Val ("Data.Ix","index")
{-# NOINLINE v_inRange #-}
v_inRange = toName Val ("Data.Ix","inRange")
{-# NOINLINE v_runExpr #-}
v_runExpr = toName Val ("Prelude.IO","runExpr")
{-# NOINLINE v_runRaw #-}
v_runRaw = toName Val ("Jhc.Prim.Wrapper","runRaw")
{-# NOINLINE v_runMain #-}
v_runMain = toName Val ("Jhc.IO","runMain")
{-# NOINLINE v_runNoWrapper #-}
v_runNoWrapper = toName Val ("Jhc.Prim.Wrapper","runNoWrapper")
{-# NOINLINE v_enum_succ #-}
v_enum_succ = toName Val ("Jhc.Inst.PrimEnum","enum_succ")
{-# NOINLINE v_enum_pred #-}
v_enum_pred = toName Val ("Jhc.Inst.PrimEnum","enum_pred")
{-# NOINLINE v_enum_from #-}
v_enum_from = toName Val ("Jhc.Inst.PrimEnum","enum_from")
{-# NOINLINE v_enum_fromTo #-}
v_enum_fromTo = toName Val ("Jhc.Inst.PrimEnum","enum_fromTo")
{-# NOINLINE v_enum_fromThen #-}
v_enum_fromThen = toName Val ("Jhc.Inst.PrimEnum","enum_fromThen")
{-# NOINLINE v_enum_fromThenTo #-}
v_enum_fromThenTo = toName Val ("Jhc.Inst.PrimEnum","enum_fromThenTo")
{-# NOINLINE v_enum_toEnum #-}
v_enum_toEnum = toName Val ("Jhc.Inst.PrimEnum","enum_toEnum")
{-# NOINLINE v_ix_index #-}
v_ix_index = toName Val ("Jhc.Inst.PrimEnum","ix_index")
{-# NOINLINE v_ix_inRange #-}
v_ix_inRange = toName Val ("Jhc.Inst.PrimEnum","ix_inRange")
{-# NOINLINE v_ix_range #-}
v_ix_range = toName Val ("Jhc.Inst.PrimEnum","ix_range")
{-# NOINLINE s_Star #-}
s_Star = toName SortName ("Jhc@","*")
{-# NOINLINE s_Hash #-}
s_Hash = toName SortName ("Jhc@","#")
{-# NOINLINE s_Bang #-}
s_Bang = toName SortName ("Jhc@","!")
{-# NOINLINE s_Tuple #-}
s_Tuple = toName SortName ("Jhc@","(#)")
{-# NOINLINE s_HashHash #-}
s_HashHash = toName SortName ("Jhc@","##")
{-# NOINLINE s_StarStar #-}
s_StarStar = toName SortName ("Jhc@","**")


